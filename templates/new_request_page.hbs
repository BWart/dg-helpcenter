<div class="container-divider"></div>
<div class="container">
  <nav class="sub-nav">
    {{breadcrumbs}}
    {{search submit=false}}
  </nav>

  <h1 class="Header" id="HeaderID" data-wording-key="headerTitle">
      <!--{{t 'submit_a_request'}}{{#if follow_up}}<span class='follow-up-hint'>{{follow_up}}</span>{{/if}}-->
  </h1>
  
  <div class="form requestform" id="requestForm">
    <font class="contactFormInfoTextClass regular" data-wording-key="contactFormInfoText"></font><font class="fallbackInfoText regular" data-wording-key="fallbackInfoText"></font><br><br>
    <!-- AUTOMATED CHAT -->
    {{chat}}


    <!-- PROGRESS BAR TESTING &#10003 -->

    <table class="progressTable">
        <tr>
            <td class="circleOpenStep" id="circle2">1</td>
            <td style="padding-left:10px"><b data-wording-key="chooseRequestReason"></b></td>
        </tr>
        <tr class="tablespacer">
            <td></td>
        </tr>
        <tr>
            <td class="line" ><div class="line" style="min-height:30px"></div></td>
            <td style="padding-left:10px;padding-bottom:30px;padding-top:15px">
              <div id="inserter2"></div>
            </td>
        </tr>
        <tr class="tablespacer">
            <td></td>
        </tr>
        <tr>
            <td class="circleOpenStep" id="circle3">2</td>
            <td style="padding-left:10px"><b class="circle3Title"><font data-wording-key="contactOptions"></font></b><b data-wording-key="email" class="circle3Title2"></b><b data-wording-key="callbackTitle" class="circle3Title3"></b></td>
        </tr>
        <tr class="tablespacer">
            <td></td>
        </tr>
        <tr>
            <td class="line" ><div class="line" style="min-height:30px"></div></td>
            <td style="padding-left:10px;padding-top:0px">

              <!-- DESKTOP CONTACT TABLE -->
              <table width="100%" class="contactInfos hideUnder650" id="desktopContactTable">
                <tr>
                    <td colspan="3">
                        <font data-wording-key="openingDays"></font><font data-wording-key="openingHours"></font>
                        <font data-wording-key="openingDays2"></font><font data-wording-key="openingHours2"></font>
                        <font id="holidaysDesktop"></font>
                    </td>
                </tr>
                <tr>
                  <td width="33%" style="padding-right:20px;padding-top:15px"><div id="mailIconCellContent"><img src="{{asset 'mailIcon.png'}}" height="20px"></div><div id="row1cell1inserter"></div></td>
                  <td width="33%" style="padding-right:10px;padding-left:10px;padding-top:15px"><div id="phoneIconCellContent"><img src="{{asset 'phoneIcon.png'}}" height="20px"></div><div id="row1cell2inserter"></div></td>
                  <td width="33%" style="padding-left:20px;padding-top:15px"><div id="chatIconCellContent"><img src="{{asset 'chatIcon.png'}}" height="20px">&nbsp;&nbsp;<div class="recommendedChannel" data-wording-key="recommendedChannel" style="display:none"></div></div><div id="row1cell3inserter"></div></td>
                </tr>
                <tr>
                  <td style="padding-right:20px"><div id="mailTitleCellContent"><b data-wording-key="email"></b></div><div id="row2cell1inserter"></div></td>
                  <td style="padding-right:10px;padding-left:10px"><div id="phoneTitleCellContent"><b data-wording-key="phone" class="phoneTitle1"></b><b data-wording-key="callbackTitleText" class="phoneTitle2"></b></div><div id="row2cell2inserter"></div></td>
                  <td style="padding-left:20px"><div id="chatTitleCellContent"><b data-wording-key="chat"></b></div><div id="row2cell3inserter"></div></td>
                </tr>
                <tr>
                  <td style="padding-right:20px;vertical-align:top"><div id="mailTextCellContent"><font data-wording-key="emailDescription"></div><div id="row3cell1inserter"></div></td>
                  <td style="padding-right:10px;padding-left:10px;vertical-align:top">
                    <div id="phoneTextCellContent">
                      <div class="callWaitTimeOnly"><div class="waittime" data-wording-key="callWaitTime"></div></div>
                      <div class="callbackWaitTimeOnly"><div class="waittimeCallback" data-wording-key="callbackWaitTime"></div></div>
                    </div>
                    <div id="row3cell2inserter"></div>
                  </td>
                  <td style="padding-left:20px;vertical-align:top">
                    <div id="chatTextCellContent">
                      <div class="chatWaitTimeOnly"><div class="waittime" data-wording-key="chatWaitTime"></div></div>
                    </div>
                    <div id="row3cell3inserter"></div>
                  </td>
                </tr>
                <tr>
                  <td style="padding-right:20px;padding-top:10px"><div id="mailButtonCellContent"><div class="button-contact contactFormWriteUs" data-wording-key="writeUs"></div></div></div><div id="row4cell1inserter"></div></td>
                  <td style="padding-right:10px;padding-left:10px;padding-top:10px"><div id="phoneButtonCellContent">
                    <div class="button-contact phone-number private-number private-customer connect-customer" data-wording-key="callUsPrivate"></div>
                    <div class="button-contact phone-number business-number business-customer" data-wording-key="callUsBusiness"></div>
                    <div class="button-contact callback-number" data-wording-key="callYouCallback"></div>
                    <div class="button-contact callback-number-offline button-offline" data-wording-key="callbackOffline"></div>
                    </div><div id="row4cell2inserter"></div></td>
                  <td style="padding-left:20px;padding-top:10px"><div id="chatButtonCellContent"><div class="button-contact button-chat button-offline" data-wording-key="chatNotOnline"></div></div><div id="row4cell3inserter"></div>
                  </td>
                </tr>
                <tr>
                  <td colspan="3"><div class="liveChannelsClosedMessage" data-wording-key="liveChannelsClosedMessage" style="color:red"></div></td>
                </tr>
              </table>

              <!-- MOBILE CONTACT TABLE -->
              <table class="contactInfos hideOver651" border="0">
                <tr style="height:0px">
                    <td colspan="3">
                        <font data-wording-key="openingDays"></font>
                        <font data-wording-key="openingHours"></font>
                        <font data-wording-key="openingDays2"></font>
                        <font data-wording-key="openingHours2"></font>
                        <font id="holidaysMobile"></font>
                    </td>
                </tr>
                <tr>
                  <td class="contactButtonTableCellLeftNoBorder" style="padding-top:15px">
                    <div id="mobileMailCell1Content">
                      <img src="{{asset 'mailIcon.png'}}" height="16px">
                      <b><font data-wording-key="email"></font></b>
                      <font style="font-size: 11px;"><br><font data-wording-key="emailDescriptionMobile"></font></font>
                    </div>
                    <div id="mobileInserter1"></div>
                  </td>
                </tr>
                <tr>
                  <td class="contactButtonTableCellLeftNoBorderBottomPadding">
                    <div id="mobileMailCell2Content">
                      <div class="button-contact contactFormWriteUs" data-wording-key="writeUs"></div>
                    </div>
                    <div id="mobileInserter2"></div>
                  </td>
                </tr>
                <tr>
                  <td class="contactButtonTableCellLeftNoBorder">
                    <div id="mobilePhoneCell1Content">
                      <img src="{{asset 'phoneIcon.png'}}" height="16px">
                      <b><font class="phoneTitle1" data-wording-key="phone"></font><font data-wording-key="callbackTitleText" class="phoneTitle2"></font></b>
                      <font class="callWaitTimeOnly"><br><font class="waittime" style="font-size: 11px;" data-wording-key="callWaitTime"></font></font>
                      <font class="callbackWaitTimeOnly"><br><font class="waittimeCallback" style="font-size: 11px;" data-wording-key="callbackWaitTime"></font></font>
                    </div>
                    <div id="mobileInserter3"></div>
                  </td>
                </tr>
                <tr>
                  <td class="contactButtonTableCellLeftNoBorderBottomPadding">
                    <div id="mobilePhoneCell2Content">
                      <div class="button-contact phone-number private-number2 private-customer connect-customer" data-wording-key="callUsPrivateMobile"></div>
                      <div class="button-contact phone-number business-number2 business-customer" data-wording-key="callUsBusinessMobile"></div>
                      <div class="button-contact callback-number2" data-wording-key="callYouCallback"></div>
                      <div class="button-contact callback-number-offline-mobile button-offline" data-wording-key="callbackOfflineMobile"></div>
                      <div class="callbackClosedMessage" data-wording-key="callbackClosedMessage" style="color:red"></div>
                    </div>
                    <div id="mobileInserter4"></div>
                  </td>
                </tr>
                <tr>
                  <td class="contactButtonTableCellLeftNoBorder">
                    <div id="mobileChatCell1Content">
                      <img src="{{asset 'chatIcon.png'}}" height="16px">
                      <b><font data-wording-key="chat"></font></b>
                      <font class="chatWaitTimeOnly"><br><font class="waittime" style="font-size: 11px;" data-wording-key="chatWaitTime"></font></font>
                      <div class="recommendedChannel" data-wording-key="recommendedChannel" style="float:right;"></div>
                    </div>
                    <div id="mobileInserter5"></div>
                  </td>
                </tr>
                <tr>
                  <td class="contactButtonTableCellLeftNoBorder">
                    <div id="mobileChatCell2Content">
                      <div class="button-contact button-chat button-offline" data-wording-key="chatNotOnline"></div>
                      <div class="chatClosedMessage" data-wording-key="chatClosedMessage" style="color:red"></div>
                    </div>
                    <div id="mobileInserter6"></div>
                  </td>
                </tr>
              </table>

              <h5><a class="text-back">&lt; <font data-wording-key="backButtonText"></font></a></h5>
              {{request_form}}
              <form class="callbackRequestForm" id="callbackRequestForm" action="">
                <div class="form-field string optional request">
                  <table class="chPreCodeTable">
                    <tr><td><input type="radio" class="radioCH" id="radioCH" name="radioCH" checked/></td><td><label data-wording-key="countryCH"></label></td></tr>
                    <tr><td><input type="radio" class="radioLI" id="radioLI" name="radioCH"/></td><td><label data-wording-key="countryLI"></label></td></tr>
                  </table>
                </div>
                <div class="form-field string optional request">
                  <label data-wording-key="callbackPhoneNumber"></label>
                  <table><tr><td class="callbackVorwahl">+41&nbsp;&nbsp;</td><td><input type="number" min="0" name="callback_customer_phone_number" class="callback_customer_phone_number_input"/></td></tr></table>
                  <label class="callbackPhoneErrorLabel"><font color="red" class="callbackPhoneErrorText"></font></label>
                  <label><i data-wording-key="callbackPhoneNumberHint"></i></label>
                </div>
                <div class="form-field string optional request callbackOrderNumberFormFields">
                  <label data-wording-key="callbackOrderNumber"></label>
                  <table><tr><td><input type="number" name="callback_customer_order_number" class="callback_customer_order_number_input"/></td></tr></table>
                </div>
                <div class="form-field string optional request callbackRGNumberFormFields">
                  <label data-wording-key="callbackRGNumber"></label>
                  <table><tr><td><input type="number" name="callback_customer_rg_number" class="callback_customer_rg_number_input"/></td></tr></table>
                </div>
                <div class="form-field string optional request">
                  <label for="callback_customer_email" data-wording-key="callbackEmailLabel"></label>
                  <input type="email" name="callback_customer_email" id="callback_customer_email" class="callback_customer_mail_input"/>
                  <label class="callbackMailErrorLabel"><font color="red" class="callbackMailErrorText"></font></label>
                  <!--<label><i data-wording-key="callbackMailHint"></i></label>-->
                </div>
                <div class="form-field">
                  <label data-wording-key="callbackRecordingLabel" class="callback_customer_record_label_ch"></label>
                  <table border="0px solid" class="callback_customer_record_label_eu">
                    <tr>
                      <td width="20px" style="vertical-align:top" ><input type="checkbox" id="callbackRecording" name="callbackRecording" class="callback_customer_record_checker" checked></td><td style="vertical-align:top"><label data-wording-key="callbackRecordingLabelEU"></label></td>
                    </tr>
                  </table>
                </div>
                <div class="form-field">
                  <label data-wording-key="callbackAgentHint"></label>
                  <label class="callbackFormErrorText" style="color:red"></label>
                  <button type="button" class="button-large callbackSubmitButton" data-wording-key="demandCallback"></button>
                </div>
              </form>
            </td>
        </tr>
    </table>
     
  </div>
</div>
<script>
  //THE FULL MAIL FORM IS INITIALLY HIDDEN

  // --- SETTING UP VARIABLES ---
  // General variables
  // Following variables are already defined elsewhere: portal, currentLanguage
  let fullLink = window.location.href;
  let customerType = "connect-customer"; 
  let infoBoxWording = fillInfoBoxWording();
  let dynamicWording = filldynamicWording();
  let contactFormIsShown = 0; // 0 Shows Infotext and 1 shows OrderNumber Field
  //List of tags to hide OrderNumber Input Field
  const reasonsForNoOrderNumber = ["webform_case_product_advice_it", "webform_case_product_advice_network", "webform_case_product_advice_consumer",
  "webform_case_product_advice_photo", "webform_case_product_advice_home", "webform_case_product_advice_diy", "webform_case_delete_account", "webform_case_cant_login",
  "webform_case_offer", "webform_case_no_bill", "webform_case_data_request"]
  //list of tags to hide Contact Form for PE and general requests during opening times
  const reasonsForNoContactFormPE = ["webform_case_product_advice_it", "webform_case_product_advice_network", "webform_case_product_advice_consumer",
  "webform_case_product_advice_photo", "webform_case_product_advice_home", "webform_case_product_advice_diy"]
  //var reasonsForNoContactFormPE = []
  //ALL REASONS
  //var reasonsForNoContactFormGeneral = ["webform_case_shipping_status", "webform_case_ready_for_shipment", "webform_case_order_status", "webform_case_damaged_product", "webform_case_not_working_product", "webform_case_wrong_product", "webform_case_missing_product", "webform_case_cancel_order", "webform_case_other_request_order", "webform_case_return", "webform_case_return_status", "webform_case_creditnote", "webform_case_other_request_returns", "webform_case_refund", "webform_case_receipt", "webform_case_payment_reminder", "webform_case_no_bill", "webform_case_dunning_block", "webform_case_other_request_payment", "webform_case_delete_account", "webform_case_cant_login", "webform_case_other_request_account", "webform_case_product_advice_it", "webform_case_product_advice_network", "webform_case_product_advice_consumer", "webform_case_product_advice_photo", "webform_case_product_advice_home", "webform_case_product_advice_diy"]
  //ONLY FOLLOWING REASONS: Where is my order, problems with an order, payment
  //var reasonsForNoContactFormGeneral = ["webform_case_shipping_status", "webform_case_ready_for_shipment", "webform_case_order_status", "webform_case_damaged_product", "webform_case_not_working_product", "webform_case_wrong_product", "webform_case_missing_product", "webform_case_cancel_order", "webform_case_other_request_order", "webform_case_refund", "webform_case_receipt", "webform_case_payment_reminder", "webform_case_no_bill", "webform_case_dunning_block", "webform_case_other_request_payment"]
  //NO REASONS
  const reasonsForNoContactFormGeneral = []

  //Display longer wait times for mails for specific reasons -- NOT ACTIVE ANYMORE
  const reasonsForLongerMailWaitTime = ["webform_case_product_advice_it", "webform_case_product_advice_network"]
  const languagesForLongerMailWaitTime = ["de"]

  //reasons for callback to be shown
  const reasonsForCallback = ["webform_case_connect_customer",
    "webform_case_connect_payment",
    "webform_case_connect_technical",
    "webform_case_connect_b2b"]
  
  const requestReasonTopCategory = {
    "webform_case_connect_customer": "connect",
    "webform_case_connect_payment": "connect",
    "webform_case_connect_technical": "connect",
    "webform_case_connect_b2b": "connect"
  }

  // DOM elements and their contents
  const fullMailform = $('.requestform');
  const introText = $('.contactFormInfoTextClass');
  const fallbackText = $('.fallbackInfoText');
  const customerTypeDropdown = $('.request_ticket_form_id');
  const [requestReasonDropdown, requestReasonDropdownNesty, requestReasonDropdownContents] = getRequestReasonDropdown();
  const contactInfos = $('.contactInfos');
  const infoText = $('.contactFormTextInfo');
  const backButton = $('.text-back');
  const requestForm = $('.request-form');
  const circleTwo = document.getElementById('circle2');
  const circleThree = document.getElementById('circle3');
  const circleThreeTitle = $('.circle3Title');
  const circleThreeTitleTwo = $('.circle3Title2');
  const circleThreeTitleThree = $('.circle3Title3')
  const waitTimes = $('.waittime');
  const chatWaitTimesDOMElements = $('.chatWaitTimeOnly');
  const callWaitTimesDOMElements = $('.callWaitTimeOnly');
  const callbackWaitTimesDOMElements = $('.callbackWaitTimeOnly');
  const customerTypeDropdownLabel = $('[for=request_issue_type_select]');
  const contactOptions= $('.request-form');
  const requestReasonDropdownLabel = $('#request_custom_fields_360014169819_label')
  const privateContact = $('.private-customer');
  const businessContact = $('.business-customer')
  const connectContact = $('.connect-customer')
  const phoneTitleOne = $('.phoneTitle1')
  const phoneTitleTwo = $('.phoneTitle2')
  const liveChannelsClosedMessage = $('.liveChannelsClosedMessage')
  const chatClosedMessage = $('.chatClosedMessage')
  const callbackClosedMessage = $('.callbackClosedMessage')
  //Mailform fields, with label and Input field
  const mailFormOrderNumberOrPhoneNumber = $('.request_custom_fields_360007585419');  //Input field for order number, phone number on digitec Connect
  const mailFormSubject = $('.request_subject');
  const mailFormMessage = $('.request_description');
  const mailFormMailInput = $('.request_anonymous_requester_email');
  const commitButton = $('input[name ="commit"]');
  //Mailform fields, labels and input fields separated
  const mailFormAttachmentDropZone = $('#upload-dropzone');
  const mailFormAttachmentLabel = $('label[for="request-attachments"]')
  const mailFormSubjectLabel = $('#request_subject_label');
  const mailFormSubjectTextField = $('#request_subject');
  const mailFormMessageLabel = $('#request_description_label');
  const mailFormMessageTextField = $('#request_description');
  //Contents of DOM elements
  var requestReasonTag = 'unknown'; //Filled when the request reason dropdown is changed
  //WaitSeconds
  let callWaitSeconds = 0;
  let chatWaitSeconds = 0;


  //--- CALLBACK SETTING UP A/B AND FURTHER VARIABLES
  $('.callback_customer_record_label_ch').hide();
  $('.callback_customer_record_label_eu').hide();
  if(portal == 'helpcenter.galaxus.ch' || portal == 'helpcenter.digitec.ch'){
    $('.callback_customer_record_label_ch').show();
  } else {
    $('.callback_customer_record_label_eu').show();
  }
  $('.callback-number-offline').hide();
  $('.callback-number-offline-mobile').hide();
  let callBackTokenChecker = false;
  let callbackButton = $('.callback-number')
  let callbackButtonMobile = $('.callback-number2')
  let callbackButtonClicked = false;
  callbackButton.hide();
  callbackButtonMobile.hide();
  if ((portal == "helpcenter.digitec.ch" || portal == "helpcenter.galaxus.ch") && (!isInOpeningTimes() || isHoliday())){
    callbackButton = $('.callback-number-offline')
    callbackButtonMobile = $('.callback-number-offline-mobile')
  } else if ((portal == "helpcenter.galaxus.de" || portal == "helpcenter.galaxus.at") && (!isInOpeningTimes() || isHoliday())){
    callbackButton = $('.callback-number-offline')
    callbackButtonMobile = $('.callback-number-offline-mobile')
  }
  const callbackForm = $('.callbackRequestForm')
  const callBackSubmitButton = $('.callbackSubmitButton')
  callbackForm.hide()
  
  localStorage.setItem("callbackGroup5", "true");
  
  const callBackPhoneInputField = $('.callback_customer_phone_number_input')
  const callBackOrderInputField = $('.callback_customer_order_number_input')
  const callBackRGInputField = $('.callback_customer_rg_number_input')
  const callBackMailInputField = $('.callback_customer_mail_input')
  const callBackRecordChecker = $('.callback_customer_record_checker')
  const chPreCodeTable = $('.chPreCodeTable')
  const callbackPrecode = $('.callbackVorwahl')
  let callbackCountry = "CH"
  switch (portal) {
    case 'helpcenter.galaxus.de':
      callbackCountry = "DE"
      callBackRecordChecker.prop('checked', false);
      callbackPrecode.html("+49&nbsp;&nbsp;")
      break;
    case 'helpcenter.galaxus.at':
      callbackCountry = "AT"
      callBackRecordChecker.prop('checked', false);
      callbackPrecode.html("+43&nbsp;&nbsp;")
      break;
    default:
      callbackCountry = "CH"
      callbackPrecode.html("+41&nbsp;&nbsp;")
  }

  // --- Callback Ring Group levels ---
  const callbackRingGroupLevels = {
    "webform_case_shipping_status": "_lv1",
    "webform_case_ready_for_shipment": "_lv1",
    "webform_case_order_status": "_lv1",
    "webform_case_damaged_product": "_lv4",
    "webform_case_not_working_product": "_lv4",
    "webform_case_wrong_product": "_lv2",
    "webform_case_missing_product": "_lv4",
    "webform_case_cancel_order": "_lv2",
    "webform_case_other_request_order": "_lv4",
    "webform_case_return": "_lv3",
    "webform_case_return_status": "_lv4",
    "webform_case_creditnote": "_lv4",
    "webform_case_other_request_returns": "_lv4",
    "webform_case_refund": "_lv4",
    "webform_case_receipt": "_lv2",
    "webform_case_payment_reminder": "_lv4",
    "webform_case_no_bill": "_lv4",
    "webform_case_dunning_block": "_lv4",
    "webform_case_other_request_payment": "_lv4",
    "webform_case_delete_account": "_lv4",
    "webform_case_cant_login": "_lv4",
    "webform_case_data_request": "_lv4",
    "webform_case_other_request_account": "_lv4",
    "webform_case_product_advice_it": "_lvpe",
    "webform_case_product_advice_network": "_lvpe",
    "webform_case_product_advice_consumer": "_lvpe",
    "webform_case_product_advice_photo": "_lvpe",
    "webform_case_product_advice_home": "_lvpe",
    "webform_case_product_advice_diy": "_lvpe",
    "webform_case_offer": "_lv4"
  }

  const callbackRingGroupLevelsEU = {
    "webform_case_shipping_status": "_lv1",
    "webform_case_ready_for_shipment": "_lv1",
    "webform_case_order_status": "_lv1",
    "webform_case_damaged_product": "_lv4",
    "webform_case_not_working_product": "_lv4",
    "webform_case_wrong_product": "_lv4",
    "webform_case_missing_product": "_lv4",
    "webform_case_cancel_order": "_lv1",
    "webform_case_other_request_order": "_lv4",
    "webform_case_return": "_lv1",
    "webform_case_return_status": "_lv4",
    "webform_case_creditnote": "_lv4",
    "webform_case_other_request_returns": "_lv4",
    "webform_case_refund": "_lv4",
    "webform_case_receipt": "_lv1",
    "webform_case_payment_reminder": "_lv4",
    "webform_case_no_bill": "_lv4",
    "webform_case_dunning_block": "_lv4",
    "webform_case_other_request_payment": "_lv4",
    "webform_case_delete_account": "_lv4",
    "webform_case_cant_login": "_lv4",
    "webform_case_other_request_account": "_lv4",
    "webform_case_data_request": "_lv4",
    "webform_case_product_advice_it": "_lvpe",
    "webform_case_product_advice_network": "_lvpe",
    "webform_case_product_advice_consumer": "_lvpe",
    "webform_case_product_advice_photo": "_lvpe",
    "webform_case_product_advice_home": "_lvpe",
    "webform_case_product_advice_diy": "_lvpe",
    "webform_case_offer": "_lv4"
  }


  
  // --- INITIAL SETUP ---
  chatClosedMessage.hide()
  callbackClosedMessage.hide()
  liveChannelsClosedMessage.hide()
  // Case when "Contact Us" Button in footer is clicked
  addExternalScriptForWaitingTimes(true);
  if (fullLink.slice(-3) == 'new' || fullLink.slice(-4) == 'new/'){
    pageSetup('contactUs');
  }
  // Case when the page reloads after an incorrectly filled mail form
  else if (fullLink.slice(-8) == 'requests'){
    //TODO: Handling beim Laden nach Eingabefehler
    removeOfferforPrivate();
    removeDataRequestForBusiness();
    pageSetup('mailFormWrong')
  }
  // Rest; Case when the page loads after the customer type was selected
  else {
    pageSetup('customerChosen');
    removeOfferforPrivate();
    removeDataRequestForBusiness();
  }



  // --- FUNCTIONS THAT ADJUST THE PAGE AND ELEMENTS ---
  function pageSetup(entryPoint){
    //Make form attachments required for some reasons
    isFormAttachmentRequired();
    //Hide information that should not be displayed at start
    chatWaitTimesDOMElements.hide();
    callWaitTimesDOMElements.hide();
    callbackWaitTimesDOMElements.hide();
    fallbackText.hide();
    requestForm.hide()
    customerTypeDropdownLabel.hide()
    circleThreeTitleTwo.hide()
    circleThreeTitleThree.hide()
    waitTimes.hide()
    backButton.hide();
    contactInfos.hide();
    if (portal != 'helpcenter.digitec.ch' && portal != 'helpcenter.galaxus.ch' && portal != 'helpcenter.connect.digitec.ch'){
      chPreCodeTable.hide()
    }
    //adjust the order of the form elements
    customerTypeDropdown.insertBefore(document.getElementById('inserter'));
    //adjust additional elements if it is a customer form
    if (entryPoint == 'customerChosen' || entryPoint == 'mailFormWrong'){
      requestReasonDropdown.insertBefore(document.getElementById('inserter2'));
    }
    if (entryPoint == 'mailFormWrong'){
      onDropdownChange();
      showContactForm();
      mailFormMessageTextField.val(sessionStorage.getItem('mailFormMessageTextFieldText'));
    }
    //show form
    if (portal == 'helpcenter.connect.digitec.ch'){
      
    }
    fullMailform.show();
  }

  function onDropdownChange(){
    chatClosedMessage.hide()
    callbackClosedMessage.hide()
    liveChannelsClosedMessage.hide()
    circleTwo.classList.remove('circleOpenStep');
    circleTwo.classList.add('circleStepCompleted');
    circleTwo.innerHTML = '&#10003';
    if (requestReasonDropdownContents.attr('value') == null){
      fallbackExit();
      return;
    } else {
      requestReasonTag = requestReasonDropdownContents.attr('value').replace('//duplicate', '');
    }
    infoText.html(infoBoxWording[requestReasonTag][currentLanguage]);
    $('.questionNotAnswered').hide();
    $('.contactNowButton').hide();
    infoText.show();
    updateLabelAndTemplate();
    mailFormSubjectTextField.val($(requestReasonDropdownNesty).text());  //Autofill Mail Subject

    contactNowClicked();

    //-- CALLBACK BUTTON SHOW/HIDE --
    if (callbackCheck()){
      $('.phone-number').hide()
      callbackButton.show()
      callbackButtonMobile.show()
      phoneTitleTwo.show()
      phoneTitleOne.hide()
    }
    else {
      callbackButton.hide()
      callbackButtonMobile.hide()
      phoneTitleTwo.hide()
      phoneTitleOne.show()
    }

    //-- CALLBACK ALTERNATIVE PHONE NUMBERS --
        //if (currentLanguage == 'de' && reasonsForCallback.indexOf(requestReasonTag) >= 0 && localStorage.getItem("callbackGroup5") == "true" && customerType == "private-customer" && (portal == 'helpcenter.digitec.ch' || portal == 'helpcenter.galaxus.ch')){

    if (currentLanguage == 'de' && reasonsForCallback.indexOf(requestReasonTag) >= 0 && localStorage.getItem("callbackGroup5") == "false" && customerType == "private-customer" && (portal == 'helpcenter.digitec.ch' || portal == 'helpcenter.galaxus.ch')){
      var extraPrivateNumber = "undefined";
      var extraPrivateNumberText = "undefined";
      var dynamicWordingTemp = filldynamicWording();
      if (portal == "helpcenter.digitec.ch"){
        switch (requestReasonTopCategory[requestReasonTag]){
          case 'where_is_my_order':
            var dynamicWordingTemp = filldynamicWording("+41445759708", "+41 44 575 97 08")
            break;
          case 'problems_with_an_order':
            var dynamicWordingTemp = filldynamicWording("+41445759709", "+41 44 575 97 09")
            break;
          case 'return':
            var dynamicWordingTemp = filldynamicWording("+41445759802", "+41 44 575 98 02")
            break;
          case 'payment_reminder_and_refund':
            var dynamicWordingTemp = filldynamicWording("+41445759803", "+41 44 575 98 03")
            break;
          case 'customer_account':
            var dynamicWordingTemp = filldynamicWording("+41445759805", "+41 44 575 98 05")
            break;
          default:
            var dynamicWordingTemp = filldynamicWording()
            break;
        }
      }
      if (portal == 'helpcenter.galaxus.ch'){
        console.log(requestReasonTopCategory[requestReasonTag])
        switch (requestReasonTopCategory[requestReasonTag]){
          case 'where_is_my_order':
            var dynamicWordingTemp = filldynamicWording("+41445759602", "+41 44 575 96 02")
            break;
          case 'problems_with_an_order':
            var dynamicWordingTemp = filldynamicWording("+41445759604", "+41 44 575 96 04")
            break;
          case 'return':
            var dynamicWordingTemp = filldynamicWording("+41445759605", "+41 44 575 96 05")
            break;
          case 'payment_reminder_and_refund':
            var dynamicWordingTemp = filldynamicWording("+41445759607", "+41 44 575 96 07")
            break;
          case 'customer_account':
            var dynamicWordingTemp = filldynamicWording("+41445759609", "+41 44 575 96 09")
            break;
          default:
            var dynamicWordingTemp = filldynamicWording()
            break;
        }
      }
      $('.private-number').html(dynamicWordingTemp['de']['callUsPrivate'])
      $('.private-number2').html(dynamicWordingTemp['de']['callUsPrivateMovile'])
    }
    fillHoliday(currentLanguage);
  }

  function updateLabelAndTemplate(){
    //Update Label and Template
    if (infoBoxWording[requestReasonTag][currentLanguage + 'MailTemplate']){
      mailFormMessageTextField.val(infoBoxWording[requestReasonTag][currentLanguage + 'MailTemplate'])
    } else {
      mailFormMessageTextField.val('')
    }
    if (infoBoxWording[requestReasonTag][currentLanguage + 'DescriptionLabel']){
      mailFormMessageLabel.html(infoBoxWording[requestReasonTag][currentLanguage + 'DescriptionLabel'])
    } else {
      switch (currentLanguage) {
        case 'de':
          mailFormMessageLabel.html('Beschreibung')
          break;
        case 'fr':
          mailFormMessageLabel.html('Description')
          break;
        case 'it':
          mailFormMessageLabel.html('Descrizione')
          break;
        case 'en-US':
          mailFormMessageLabel.html('Description')
          break;
      }
    }
  }

  function contactNowClicked(){
    switch (customerType){
      case "private-customer":
        privateContact.show();
        break;
      case "business-customer":
        businessContact.show();
        break;
      case "connect-customer":
        connectContact.show();
        break;
      default:
        privateContact.show();
        break;
    }
    try {
      updateChatDepartment();
    }
    catch (e) {
      console.log(e);
      hideChatButton(); 
      if(gaSend){
        //TODO: TRACKING
        //ga('send', 'event', 'Errors', 'ChatLoad', String(e));
      }
    } 
    addExternalScriptForWaitingTimes(false);
    contactInfos.show();
    requestForm.hide();
    callbackForm.hide();
    backButton.hide();
    circleThreeTitle.show();
    circleThreeTitleTwo.hide();
    circleThreeTitleThree.hide();
    if (reasonsForNoOrderNumber.indexOf(requestReasonTag) >= 0){
      mailFormOrderNumberOrPhoneNumber.hide()
    }
    else {
      mailFormOrderNumberOrPhoneNumber.show();
    }
    reorderContactChannels();
  }

  function fallbackExit(){
    introText.hide();
    fallbackText.show();
  }

  function removeOfferforPrivate(){
    if (customerType == 'private-customer'){
      // Removes Offers for Private Customers
      var categoryToRemove = 'webform_case_offer';
      try {
        var catJson = JSON.parse(requestReasonDropdownContents.attr("data-tagger"));
        requestReasonDropdownContents.attr("data-tagger", removeCategoryFromJson(catJson, categoryToRemove));
      }
      catch (e) { // Initial wird das Formular immer geladen ohne Kundentyp und deshalb hier etwas unschön gecatcht. Funktionalität ist jedoch nicht kritisch 
      }
    }
  }

  function removeDataRequestForBusiness(){
    if(customerType == 'business-customer'){
      var categoryToRemove = 'webform_case_data_request'
      try {
        var catJson = JSON.parse(requestReasonDropdownContents.attr("data-tagger"));
        requestReasonDropdownContents.attr("data-tagger", removeSubcategoryFromJson(catJson, categoryToRemove));
      }
      catch (e) { // Initial wird das Formular immer geladen ohne Kundentyp und deshalb hier etwas unschön gecatcht. Funktionalität ist jedoch nicht kritisch 
      }
    }
  }

  function removeSubcategoryFromJson(json, categoryToRemove){
    for (var i = 0; i < json.length; i++){
      if(json[i].options){
        for (var j = 0; j < json[i].options.length; j++){
          if (json[i].options[j].value == categoryToRemove){
            json[i].options.splice(j,1)
          }
        }
      }
    }
    return JSON.stringify(json)
  }

  function removeCategoryFromJson(json, categoryToRemove){  	
    for (var i = 0; i < json.length; i++){
      if (json[i].value == categoryToRemove){
        json.splice(i,1);
      }
    }
  return JSON.stringify(json);
  }

  // CSS Change für Chat Button Offline
  function hideChatButton(){
    $(".button-chat").addClass("button-offline");
 	  $(".button-chat").html(dynamicWording[currentLanguage]['chatNotOnline']);
    $(".recommendedChannel").css('display' , 'none');
    chatWaitTimesDOMElements.hide();
  }

  // CSS Change für Chat Button Online
  function showChatButton(){
    $(".button-chat").removeClass("button-offline");
    $(".button-chat").html(dynamicWording[currentLanguage]['chatUs']);
    $(".recommendedChannel").css('display' , 'inline-block');
    chatWaitTimesDOMElements.show();
  }

  //Add external wait time script
  function addExternalScriptForWaitingTimes(firstCall){
    if (!firstCall){
      $('.waitTimeScript').remove();
      $('.callbackScript').remove();
    }
    var script = document.createElement('script');
    script.classList.add('waitTimeScript')
    script.src = 'https://www.hardread.ch/testing/waitTimes.js';
    script.onload = function() {
        setWaitTimes();
    }
    script.onerror = function() {
        waitTimes.hide();
        switchHideContactFormDuringOpeningTimes = false;
        switchHideContactFormForPEDuringOpeningTimes = false;
        switchHideContactFormForBusinessDuringOpeningTimes = false;
        switchHideContactFormForEUDuringOpeningTimes = false;
    }
    document.body.appendChild(script);
    var script2 = document.createElement('script');
    script2.classList.add('callbackScript');
    if (portal == "helpcenter.digitec.ch" || portal == "helpcenter.galaxus.ch"){
      script2.src = 'https://www.hardread.ch/testing/callback.js';
    } else if (portal == "helpcenter.galaxus.de" || portal == "helpcenter.galaxus.at"){
      script2.src = 'https://www.hardread.ch/testing/callbackEU.js';
    }
    script2.onload = function() {
      callBackTokenChecker = true;
    }
    script2.onerror = function() {
        callBackTokenChecker = false;
    }
    document.body.appendChild(script2);
  }

  function addExternalScriptForCallback(enteredPhoneNumber, enteredOrderNumber, enteredMail, enteredRGNumber, enteredRecordChecker){
    $('.callbackScript').remove();
    var script2 = document.createElement('script');
    script2.classList.add('callbackScript');
    if (portal == "helpcenter.digitec.ch" || portal == "helpcenter.galaxus.ch"){
      script2.src = 'https://www.hardread.ch/testing/callback.js';
    } else if (portal == "helpcenter.galaxus.de" || portal == "helpcenter.galaxus.at"){
      script2.src = 'https://www.hardread.ch/testing/callbackEU.js';
    }
    script2.onload = function() {
      callbackAPIRequest(enteredPhoneNumber, enteredOrderNumber, enteredMail, enteredRGNumber, enteredRecordChecker);
    }
    script2.onerror = function() {
        callBackTokenChecker = false;
        callbackButtonClicked = false;
    }
    document.body.appendChild(script2);
  }

  //set the waiting times
  function setWaitTimes(){
    waitTimes.hide();
    const d = new Date();
    const dateFromExternalScript = new Date(createTimeStampUTC);
    const currentUTCDate = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds());
    const diffSeconds = Math.abs((currentUTCDate - dateFromExternalScript) / 1000)
    if (diffSeconds > 299 || isHoliday()){
      waitTimes.hide();
      return;
    }
    if (portal == 'helpcenter.galaxus.de' || portal == 'helpcenter.galaxus.at'){
      if (isInOpeningTimes()) {
        if (customerType == 'private-customer') {
          if (callWaitTimes['privateGer'] >= callWaitTimes['privateAt']) {
            setWaitTime(chatWaitTimes, callWaitTimes['privateGer'], callWaitTimes['callbackGERDE'])
          } else {
            setWaitTime(chatWaitTimes, callWaitTimes['privateAt'], callWaitTimes['callbackGERDE'])
          }
        } else {
          if (callWaitTimes['businessGer'] >= callWaitTimes['privateAt']) {
            setWaitTime(chatWaitTimes, callWaitTimes['businessGer'], callWaitTimes['callbackGERDE'])
          } else {
            setWaitTime(chatWaitTimes, callWaitTimes['privateAt'], callWaitTimes['callbackGERDE'])
          }
        }
      }
      else {
        setClosed();
      }
    }
    if (portal == 'helpcenter.connect.digitec.ch'){
      if (isInOpeningTimes()){
        switch (currentLanguage) {
          case 'de':
            setWaitTime(chatWaitTimes, callWaitTimes['connectDE'], callWaitTimes['connectDE']);
            break;
          case 'fr':
            setWaitTime(chatWaitTimes, callWaitTimes['connectFR'], callWaitTimes['connectFR']);
            break;
          case 'it':
            setWaitTime(chatWaitTimes, callWaitTimes['connectIT'], callWaitTimes['connectIT']);
            break;
          case 'en-US':
            setWaitTime(chatWaitTimes, callWaitTimes['connectEN'], callWaitTimes['connectEN']);
            break;
          default:
            setWaitTime(chatWaitTimes, callWaitTimes['connectDE'], callWaitTimes['connectDE']);
            break;
        }
      }
      else {
        setClosed();
      }
    }
    if (portal == 'helpcenter.galaxus.ch' || portal == 'helpcenter.digitec.ch'){
      if ((isInOpeningTimes() && customerType == 'private-customer') || (customerType == 'business-customer' && !isInBusinessOpeningTimes() && isInOpeningTimes())){
        switch (currentLanguage) {
            case 'de':
              setWaitTime(chatWaitTimes, callWaitTimes['privateCHDE'], callWaitTimes['callbackDE'])
              break;
            case 'fr':
              setWaitTime(chatWaitTimes, callWaitTimes['privateCHFR'], callWaitTimes['callbackFR'])
              break;
            case 'it':
              setWaitTime(chatWaitTimes, callWaitTimes['privateCHIT'], callWaitTimes['callbackIT'])
              break;
            case 'en-US':
              setWaitTime(chatWaitTimes, callWaitTimes['privateCHEN'], callWaitTimes['callbackEN'])
              break;
            default:
              setWaitTime(chatWaitTimes, callWaitTimes['privateCHDE'], callWaitTimes['callbackDE'])
              break;
        }
        if (isInCHPEOpeningTimes() && requestReasonTag.includes('webform_case_product_advice_') && currentLanguage == 'de'){
          var lastIndex = requestReasonTag.lastIndexOf('_');
          var splitstring = requestReasonTag.substring(lastIndex, requestReasonTag.length)
          var lastpart = splitstring.substring(1, splitstring.length)
          var lastpartCapitalized = lastpart.charAt(0).toUpperCase() + lastpart.substring(1, lastpart.length)
          if (lastpartCapitalized.includes('It') || lastpartCapitalized.includes('Network')) {
            setWaitTime(chatWaitTimes/*['pe' + lastpartCapitalized + 'DE']*/, callWaitTimes['peItNetwork'], callWaitTimes['peItNetwork'])
          } else if (lastpartCapitalized.includes('Consumer') || lastpartCapitalized.includes('Photo')) {
            setWaitTime(chatWaitTimes/*['pe' + lastpartCapitalized + 'DE']*/, callWaitTimes['peConsumerPhoto'], callWaitTimes['peConsumerPhoto'])
          } else if (lastpartCapitalized.includes('Diy') || lastpartCapitalized.includes('Home')) {
            setWaitTime(chatWaitTimes/*['pe' + lastpartCapitalized + 'DE']*/, callWaitTimes['peDiyHome'], callWaitTimes['peDiyHome'])
          }
        }
      }
      else if (isInBusinessOpeningTimes() && customerType == 'business-customer') {
        switch (currentLanguage) {
            case 'de':
              setWaitTime(chatWaitTimes, callWaitTimes['businessCHDE'], callWaitTimes['callback2bDE'])
              break;
            case 'fr':
              setWaitTime(chatWaitTimes, callWaitTimes['businessCHFR'], callWaitTimes['callback2bFR'])
              break;
            case 'it':
              setWaitTime(chatWaitTimes, callWaitTimes['businessCHIT'], callWaitTimes['callback2bIT'])
              break;
            case 'en-US':
              setWaitTime(chatWaitTimes, callWaitTimes['businessCHEN'], callWaitTimes['callback2bEN'])
              break;
            default:
              setWaitTime(chatWaitTimes, callWaitTimes['businessCHDE'], callWaitTimes['callback2bDE'])
              break;
        }
      }
      else {
        setClosed();
      }
    }
  }

  function setWaitTime(chatSeconds, callSeconds, callbackSeconds){
      if (chatSeconds > 180){
          $(".recommendedChannel").css('display' , 'none');
      }
      chatWaitSeconds = chatSeconds;
      callWaitSeconds = callSeconds;
      if (callbackSeconds > callSeconds) {
        callWaitSeconds = callbackSeconds
      }
      var chatElements = $('.chatWaitTime')
      var callElements = $('.callWaitTime')
      var callbackElements = $('.callbackWaitTime')
      changeWaitTimeHTML(chatSeconds[customerDepartment], chatElements)
      if (callSeconds != -1){
        changeWaitTimeHTML(callSeconds, callElements)
      }
      if (callbackSeconds != -1){
        changeWaitTimeHTML(callWaitSeconds, callbackElements)
      }
      //hideContactForm();
      waitTimes.show();
  }

  function changeWaitTimeHTML(seconds, elements){
      if (callbackCheck()){
        callbackWaitTimesDOMElements.show();
        callWaitTimesDOMElements.hide();
        $('.phone-number').hide()
        callbackButton.show()
        callbackButtonMobile.show()
        phoneTitleTwo.show()
        phoneTitleOne.hide()
      } else {
        callbackWaitTimesDOMElements.hide();
        callWaitTimesDOMElements.show();
        callbackButton.hide()
        callbackButtonMobile.hide()
        phoneTitleTwo.hide()
        phoneTitleOne.show()
        if (customerType == 'private-customer'){
          $('.private-number').show()
        }
      }
      if (seconds < 31){
          for (var i = 0; i < elements.length; i++){
              switch (currentLanguage){
                  case 'de':
                    elements[i].innerHTML = 'unter 1';
                    break;
                  case 'fr':
                    elements[i].innerHTML = 'moins de 1';
                    break;
                  case 'it':
                    elements[i].innerHTML = 'meno di 1';
                    break;
                  case 'en-US':
                    elements[i].innerHTML = 'under 1';
                    break;
                  default:
                    elements[i].innerHTML = 'unter 1';
                    break;
              }
          }  
      } else if (seconds > 1830) {
          var waitingMin = '30';
          for (var i = 0; i < elements.length; i++){
              switch(currentLanguage){
                  case 'de':
                    elements[i].innerHTML = 'min. ' + waitingMin;
                    break;
                  case 'fr':
                    elements[i].innerHTML = 'min. ' + waitingMin;
                    break;
                  case 'it':
                    elements[i].innerHTML = 'min. ' + waitingMin;
                    break;
                  case 'en-US':
                    elements[i].innerHTML = 'min. ' + waitingMin;
                    break;
                  default:
                    elements[i].innerHTML = 'min. ' + waitingMin;
                    break;
              }
          }
        } else
          {
          var waitingMin = String(Math.floor((seconds + 30)/60));
          for (var i = 0; i < elements.length; i++){
              switch (currentLanguage){
                  case 'de':
                    elements[i].innerHTML = ' ' + waitingMin;
                    break;
                  case 'fr':
                    elements[i].innerHTML = ' ' + waitingMin;
                    break;
                  case 'it':
                    elements[i].innerHTML = ' ' + waitingMin;
                    break;
                  case 'en-US':
                    elements[i].innerHTML = ' ' + waitingMin;
                    break;
                  default:
                    elements[i].innerHTML = ' ' + waitingMin;
                    break;
              }
          }
      }
  }

  //Returns true or false for holidays
  function isHoliday(){
      var portalChooser = 'ch';
      const d = new Date();
      datestring = String(d.getUTCFullYear()) + '-' + String(d.getUTCMonth() + 1) + '-' + String(d.getUTCDate()) + ' ' + String(d.getUTCHours()) + ':' + String(d.getUTCMinutes()) + ':' + String(d.getUTCSeconds())
      const utc_timestamp = Date.parse(datestring)
      var stampslist = hideWaitingTimes[portalChooser]
      checker = false;
      stampslist.forEach((stampset) => {
          if (utc_timestamp > Date.parse(stampset[0]) && utc_timestamp < Date.parse(stampset[1])){
              checker = true;
          }
      })
      return checker;
  }


  function reorderContactChannels(){
    let contactChannelChat = true;
    let contactChannelCall = true;
    let contactChannelMail = true;

    if (currentLanguage != "de") {
      contactChannelCall = false;
    }
        

    resetContactOptions();
    if (contactChannelMail == false && contactChannelChat == true && contactChannelCall == true){
      hideMailCells();
    }
    if (contactChannelMail == true && contactChannelChat == false && contactChannelCall == true){
      hideChatCells();
      phoneCellPos(1);
      mailCellPos(2);
    }
    if (contactChannelMail == true && contactChannelChat == true && contactChannelCall == false){
      hidePhoneCells();
      mailCellPos(2);
    }
    if (contactChannelMail == true && contactChannelChat == false && contactChannelCall == false){
      hideChatCells();
      hidePhoneCells();
      mailCellPos(1);
    }
    if (contactChannelMail == false && contactChannelChat == true && contactChannelCall == false){
      hideMailCells();
      hidePhoneCells();
    }
    if (contactChannelMail == false && contactChannelChat == false && contactChannelCall == true){
      hideMailCells();
      hideChatCells();
      phoneCellPos(1);
    }
  }


  function setClosed(){
    waitTimes.hide();
  } 


  // --- EVENTS ---
  // Action upon change of the request reason dropdown
  requestReasonDropdown.on('change', function(){
    if (requestReasonDropdownContents.attr('value') != ''){
      onDropdownChange();
    }
  });
  // Action upon clicking "back to contact options"
  backButton.on('click', function(){
    if (requestReasonDropdownContents.attr('value') != ''){
      onDropdownChange();
    }
  });
  // Action when clicking on "call us"
  $('.private-number').on("click", function () {
    var popup = document.getElementById("phoneNumberPrivate");
    popup.classList.toggle("show");
  }) 
  $('.private-number2').on("click", function () {
   var popup = document.getElementById("phoneNumberPrivateMobile");
   popup.classList.toggle("show");
  }) 
  $('.business-number').on("click", function () {
    var popup = document.getElementById("phoneNumberBusiness");
    popup.classList.toggle("show");
  })
  $('.business-number2').on("click", function () {
    var popup = document.getElementById("phoneNumberBusinessMobile");
  	popup.classList.toggle("show");
  })

  //Action when clicking "contact now"
  $('.contactNowButton').on("click", function() {
    contactNowClicked();
  })

  //Action when clicking "write us"
  $('.contactFormWriteUs').on("click", function () {
    showContactForm();
  })

  //Action when sending the contact form
  commitButton.on("click", function(){
    commitButtonPressed();
  })

  //Action when clicking the chat button
  $('.button-chat').on("click", function () {
    checkForTagChanges();
    if(!isInOpeningTimes()){
      chatClosedMessage.show()
      liveChannelsClosedMessage.show()
      hideChatButton()
      callbackClosedMessage.show()
      liveChannelsClosedMessage.show()
      callbackButton.hide()
      callbackButtonMobile.hide()
      callbackButton = $('.callback-number-offline')
      callbackButtonMobile = $('.callback-number-offline-mobile')
      callbackButton.show()
      callbackButtonMobile.show()
      callbackWaitTimesDOMElements.hide();
      return 0;
    }
    try {
      updateChatDepartment();
      openChat();
      setEventListernerForChatStart();
    }
    catch (e) {
      console.log(e); 
      hideChatButton();
      if(gaSend){
        ga('send', 'event', 'Errors', 'ChatLoadAfterDropdown', String(e));
      }
    } 
  });

  //--- CALLBACK EVENTS ---
  callbackButton.on("click", function(){
    if(!isInOpeningTimes()){
      callbackClosedMessage.show()
      liveChannelsClosedMessage.show()
      callbackButton.hide()
      callbackButtonMobile.hide()
      callbackButton = $('.callback-number-offline')
      callbackButtonMobile = $('.callback-number-offline-mobile')
      callbackButton.show()
      callbackButtonMobile.show()
      callbackWaitTimesDOMElements.hide();
      chatClosedMessage.show()
      liveChannelsClosedMessage.show()
      hideChatButton()
      return 0;
    }
    showContactForm()
    requestForm.hide()
    callbackForm.show()
    backButton.show()
    circleThreeTitleTwo.hide()
    circleThreeTitleThree.show()
    if (reasonsForNoOrderNumber.indexOf(requestReasonTag) >= 0){
      $('.callbackOrderNumberFormFields').hide();
    } else {
      $('.callbackOrderNumberFormFields').show();
    }
    if (requestReasonTag == 'webform_case_payment_reminder' || requestReasonTag == 'webform_case_dunning_block'){
      $('.callbackRGNumberFormFields').show();
    } else {
      $('.callbackRGNumberFormFields').hide();
    }
  })
  callbackButtonMobile.on("click", function(){
    if(!isInOpeningTimes()){
      callbackClosedMessage.show()
      liveChannelsClosedMessage.show()
      callbackButton.hide()
      callbackButtonMobile.hide()
      callbackButton = $('.callback-number-offline')
      callbackButtonMobile = $('.callback-number-offline-mobile')
      callbackButton.show()
      callbackButtonMobile.show()
      callbackWaitTimesDOMElements.hide();
      chatClosedMessage.show()
      liveChannelsClosedMessage.show()
      hideChatButton()
      return 0;
    }
    showContactForm()
    requestForm.hide()
    callbackForm.show()
    backButton.show()
    circleThreeTitleTwo.hide()
    circleThreeTitleThree.show()
    if (reasonsForNoOrderNumber.indexOf(requestReasonTag) >= 0){
      $('.callbackOrderNumberFormFields').hide();
    } else {
      $('.callbackOrderNumberFormFields').show();
    }
    if (requestReasonTag == 'webform_case_payment_reminder' || requestReasonTag == 'webform_case_dunning_block'){
      $('.callbackRGNumberFormFields').show();
    } else {
      $('.callbackRGNumberFormFields').hide();
    }
  })

  callBackSubmitButton.on("click", function(){
    if (callbackButtonClicked == true){
      return;
    }
    callbackButtonClicked = true;
    sendGARequestOpeningHours('Callback Commit clicked');
    var dynamicWording2 = filldynamicWording();
    let enteredPhoneNumber = "+41" + String(callBackPhoneInputField.val())
    if (callbackCountry == "LI"){
      enteredPhoneNumber = "+423" + String(callBackPhoneInputField.val())
    } else if (callbackCountry == "DE"){
      enteredPhoneNumber = "+49" + String(callBackPhoneInputField.val())
    } else if (callbackCountry == "AT"){
      enteredPhoneNumber = "+43" + String(callBackPhoneInputField.val())
    }
    let enteredPhoneNumberShort = String(callBackPhoneInputField.val())
    let enteredPhoneNumberShortNoLeadingZero = enteredPhoneNumberShort
    let enteredOrderNumber = callBackOrderInputField.val()
    let enteredRGNumber = callBackRGInputField.val()
    let enteredMail = callBackMailInputField.val()
    let enteredRecordChecker = "no"
    if (callBackRecordChecker.is(':checked')){
      enteredRecordChecker = "yes"
    }
    let validationChecker = true;
    if (enteredPhoneNumberShort.substring(0,1) == "0"){
      enteredPhoneNumberShortNoLeadingZero = enteredPhoneNumberShort.substring(1, enteredPhoneNumberShort.length)
    }
    // Phone number checks for CH
    if (callbackCountry == "CH"){
      if (enteredPhoneNumberShortNoLeadingZero.length != 9) {
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else if (enteredPhoneNumberShort.substring(0,4) == '0800' || enteredPhoneNumberShort.substring(0,4) == '0900' || enteredPhoneNumberShort.substring(0,4) == '0901' || enteredPhoneNumberShort.substring(0,4) == '0906' || enteredPhoneNumberShort.substring(0,3) == '084' || enteredPhoneNumberShort.substring(0,3) == '800' || enteredPhoneNumberShort.substring(0,3) == '900' || enteredPhoneNumberShort.substring(0,3) == '901' || enteredPhoneNumberShort.substring(0,3) == '906' || enteredPhoneNumberShort.substring(0,2) == '84'){
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError2'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else {
        $('.callbackPhoneErrorText').html('')
      }
    }
    // Phone number checks for LI
    if (callbackCountry == "LI"){
      if (enteredPhoneNumberShortNoLeadingZero.length < 7 || enteredPhoneNumberShortNoLeadingZero.length > 9) {
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else if (enteredPhoneNumberShort.substring(0,4) == '0800' || enteredPhoneNumberShort.substring(0,4) == '0900' || enteredPhoneNumberShort.substring(0,4) == '0901' || enteredPhoneNumberShort.substring(0,4) == '0906' || enteredPhoneNumberShort.substring(0,3) == '084' || enteredPhoneNumberShort.substring(0,3) == '800' || enteredPhoneNumberShort.substring(0,3) == '900' || enteredPhoneNumberShort.substring(0,3) == '901' || enteredPhoneNumberShort.substring(0,3) == '906' || enteredPhoneNumberShort.substring(0,2) == '84'){
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError2'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else {
        $('.callbackPhoneErrorText').html('')
      }
    }
    // Phone number checks for DE
    if (callbackCountry == "DE"){
      if (enteredPhoneNumberShortNoLeadingZero.length > 12 || enteredPhoneNumberShortNoLeadingZero.length < 10) {
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else if (enteredPhoneNumberShort.substring(0,4) == '0800' || enteredPhoneNumberShort.substring(0,4) == '0900' || enteredPhoneNumberShort.substring(0,4) == '0700' || enteredPhoneNumberShort.substring(0,3) == '800' || enteredPhoneNumberShort.substring(0,3) == '900' || enteredPhoneNumberShort.substring(0,3) == '700'){
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError2'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else {
        $('.callbackPhoneErrorText').html('')
      }
    }
    // Phone number checks for AT
    if (callbackCountry == "AT"){
      if (enteredPhoneNumberShortNoLeadingZero.length > 12 || enteredPhoneNumberShortNoLeadingZero.length < 10) {
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else if (enteredPhoneNumberShort.substring(0,4) == '0800' || enteredPhoneNumberShort.substring(0,4) == '0900' || enteredPhoneNumberShort.substring(0,4) == '0700' || enteredPhoneNumberShort.substring(0,3) == '800' || enteredPhoneNumberShort.substring(0,3) == '900' || enteredPhoneNumberShort.substring(0,3) == '700'){
        $('.callbackPhoneErrorText').html(dynamicWording2[currentLanguage]['callbackPhoneError2'])
        validationChecker = false;
        callbackButtonClicked = false;
      } else {
        $('.callbackPhoneErrorText').html('')
      }
    }
    // Mail address checks
    if (!(/.+@.+\...+/.test(enteredMail))){
      $('.callbackMailErrorText').html(dynamicWording2[currentLanguage]['callbackEmailError'])
      validationChecker = false;
      callbackButtonClicked = false;
    } else {
      $('.callbackMailErrorText').html('')
    }

    if (!validationChecker){
      $('.callbackFormErrorText').html(dynamicWording2[currentLanguage]['callbackFormError'])
    } else {
      $('.callbackFormErrorText').html('')
      sessionStorage.setItem("callbackReturn", "true")
      sessionStorage.setItem("callbackCustomerPhone", enteredPhoneNumber)
      addExternalScriptForCallback(enteredPhoneNumber, enteredOrderNumber, enteredMail, enteredRGNumber, enteredRecordChecker);
    }
  })

  $('.radioCH').on("change", function(){
    callbackPrecode.html("+41&nbsp;&nbsp;") 
    callbackCountry = "CH"
  })
  $('.radioLI').on("change", function(){
    callbackPrecode.html("+423&nbsp;&nbsp;") 
    callbackCountry = "LI"
  })




  function showContactForm(){
    circleThreeTitle.hide();
    circleThreeTitleTwo.show();
    circleThreeTitleThree.hide();
    requestForm.show();
    mailFormSubject.hide();
    backButton.show();
    contactInfos.hide();
  }

  function commitButtonPressed(){
    sendGARequestOpeningHours('ContactForm Commit clicked');
    //updateLabelAndTemplate();
    mailFormSubjectTextField.val($(requestReasonDropdownNesty).text());  //Autofill Mail Subject
    sessionStorage.setItem('dgCustomerEmail', $('input[name="request[anonymous_requester_email]"]').val());
    sessionStorage.setItem('mailFormMessageTextFieldText', mailFormMessageTextField.val())
    requestReasonDropdown.insertBefore(mailFormMailInput);
    customerTypeDropdown.insertBefore(mailFormMailInput);
    requestReasonDropdown.hide()
    customerTypeDropdown.hide()
  }



  function getRequestReasonDropdown(){
    let tempRequestReasonDropdown;
    let tempRequestReasonDropdownNesty;
    let  tempRequestReasonDropdownContents
    tempRequestReasonDropdown = $('.request_custom_fields_360021132800');
    tempRequestReasonDropdownNesty = '.request_custom_fields_360021132800' + ' a.nesty-input';
    tempRequestReasonDropdownContents = $('#request_custom_fields_360021132800');
    return[tempRequestReasonDropdown, tempRequestReasonDropdownNesty, tempRequestReasonDropdownContents]
  }



///////////////////////////////////////////////////////////////////////////////Event Tracking/////////////////////////////////////////////////////

  
  function sendGARequestOpeningHours(action){
      if(gaSend){
        //if(requestReasonTag.includes('webform_case_product_advice_') && currentLanguage == 'de') {
        //    ga('send', 'event', 'Opening Hours', 'PE ' + action, customerType + ' ' + currentLanguage);
        //} else {
          console.log(requestReasonTopCategory[requestReasonTag] + ' ' + customerType + ' ' + currentLanguage)
            //ga('send', 'event', 'Opening Hours', action, requestReasonTopCategory[requestReasonTag] + ' ' + customerType + ' ' + currentLanguage);
        //}
      }
  }

  function sendGARequestCallbackTestA(action){
    if(gaSend){
      ga('send', 'event', 'Callback Testing A', action, requestReasonTopCategory[requestReasonTag] + ' ' + customerType + ' ' + currentLanguage);
    }
  }
  function sendGARequestCallbackTestB(action){
    if(gaSend){
      ga('send', 'event', 'Callback Testing B', action, requestReasonTopCategory[requestReasonTag] + ' ' + customerType + ' ' + currentLanguage);
    }
  }
  
  //Phone Number Tracking
  
  $('.phone-number').on("click", function () {
    sendGARequestOpeningHours('Click Phone Button');
    sendGARequestOpeningHours('Click Phone/Mail/Chat Button');
    if (callbackCheck() && isInOpeningTimes()){
      sendGARequestCallbackTestA('Click Phone Button');
      sendGARequestCallbackTestA('Click Phone/Mail/Chat Button');      
    }
    if (!callbackCheck() && isInOpeningTimes() && currentLanguage == "de" && customerType == "private-customer" && (portal == 'helpcenter.digitec.ch' || portal == 'helpcenter.galaxus.ch')) {
      sendGARequestCallbackTestB('Click Phone Button');
      sendGARequestCallbackTestB('Click Phone/Mail/Chat Button');
    }
  }) 
  
  //Contact Form Tracking
  
  $('.contactFormWriteUs').on("click", function () {
    sendGARequestOpeningHours('Click Mail Button');
    sendGARequestOpeningHours('Click Phone/Mail/Chat Button');
    if (callbackCheck() && isInOpeningTimes()){
      sendGARequestCallbackTestA('Click Mail Button');
      sendGARequestCallbackTestA('Click Phone/Mail/Chat Button');      
    }
    if (!callbackCheck() && isInOpeningTimes() && currentLanguage == "de" && customerType == "private-customer" && (portal == 'helpcenter.digitec.ch' || portal == 'helpcenter.galaxus.ch')) {
      sendGARequestCallbackTestB('Click Mail Button');
      sendGARequestCallbackTestB('Click Phone/Mail/Chat Button');
    }
  }) 
  
  //Chat Tracking
  
  $('.button-chat').on("click", function () {
    sendGARequestOpeningHours('Click Chat Button');
    sendGARequestOpeningHours('Click Phone/Mail/Chat Button');
    if (callbackCheck() && isInOpeningTimes()){
      sendGARequestCallbackTestA('Click Chat Button');
      sendGARequestCallbackTestA('Click Phone/Mail/Chat Button');      
    }
    if (!callbackCheck() && isInOpeningTimes() && currentLanguage == "de" && customerType == "private-customer" && (portal == 'helpcenter.digitec.ch' || portal == 'helpcenter.galaxus.ch')) {
      sendGARequestCallbackTestB('Click Chat Button');
      sendGARequestCallbackTestB('Click Phone/Mail/Chat Button');
    }
  }) 

  //Callback Tracking
  
  $('.callback-number').on("click", function(){
    callbackGALogging();
  })
  $('.callback-number2').on("click", function(){
    callbackGALogging();
  })
  function callbackGALogging(){
    sendGARequestOpeningHours('Click Callback Button');
    sendGARequestOpeningHours('Click Phone/Mail/Chat Button');
    if (callbackCheck() && isInOpeningTimes()){
      sendGARequestCallbackTestA('Click Callback Button');
      sendGARequestCallbackTestA('Click Phone/Mail/Chat Button');      
    }
    if (!callbackCheck() && isInOpeningTimes() && currentLanguage == "de" && customerType == "private-customer" && (portal == 'helpcenter.digitec.ch' || portal == 'helpcenter.galaxus.ch')) {
      sendGARequestCallbackTestB('Click Callback Button');
      sendGARequestCallbackTestB('Click Phone/Mail/Chat Button');
    }
  }


  // Request Reason Tracking

  $('.request_custom_fields_360014169819').on("change",function() {
      if(gaSend){
          ga('send', 'event', 'Opening Hours', 'ShowsInfo', $('.request_custom_fields_360014169819' + ' a.nesty-input').text());                                                                                     
      }
  });

  //Contact now button tracking
  $('.contactNowButton').on("click", function () {
      sendGARequestOpeningHours('Click Contact Now Button');
  })





  // --- TICKET FORM ATTACHMENT CHANGES ---
  // Function to start observing node for mutations
  var startObserveMutations = function (nodeSelector, options, callbackFunction) {
    var node = document.querySelector(nodeSelector);
    if (node) {
      var observer = new MutationObserver(callbackFunction);
      observer.observe(node, options);
      return observer;
    }
  };
  
  // Callback function to execute when mutations in form attachments or dropdown are observed:
  // clear or select Attachment checkbox according to dropdown
  var mutationObservedForm = function (mutationsList) {
	  mutationsList.forEach(function (mutation) {
		  if (mutation.type == 'childList') {
			  setFormAttachmentCheckbox();
			  }
	  });
  };

  // Define some variables for requiring form attachments
  var errorMessageId = "";
  var attachmentCheckboxField = 'request_custom_fields_360007967480';
  var attachmentCheckboxId = '#' + attachmentCheckboxField;
  var attachmentErrorNotification = setErrorMessage();
  var formDropdownClass = '.request_custom_fields_360014169819';
  var formObserveMutationOptions = { childList: true, subtree: true };
  $('.request_custom_fields_360007967480').insertAfter('#request-attachments-pool');
  var attachmentErrorElt = $('.' + attachmentCheckboxField + ' .notification-error');

  // Clear or select checkbox according to dropdown and attachments:
  // Set Attachment checkbox if no attachments required, or if attachments are required and at least one is uploaded, otherwise clear it
  function setFormAttachmentCheckbox() {
	  if (isFormAttachmentRequired()) {
		  if ($('#request-attachments-pool .upload-item').length) {
			  selectCheckbox(attachmentCheckboxId);
		  }else {
			  clearCheckbox(attachmentCheckboxId);
		  }
	  }else {
		  selectCheckbox(attachmentCheckboxId);
	  }
  }

  // Return true if dropdown option 'ABCD' is selected
  function isFormAttachmentRequired() {
    var attachString = mailFormAttachmentLabel.html();
    if (attachString == null){
      attachString = "";
    }
    if (attachString.includes('<font color="red">*</font>')){
      attachString = attachString.substring(0, attachString.length - 26);
    }
    mailFormAttachmentLabel.html(attachString);
	  if($(formDropdownClass + ' a.nesty-input').attr('aria-expanded') && (requestReasonTag == 'webform_case_damaged_product')){
		  errorMessageId = currentLanguage + '1';
		  attachmentErrorNotification = setErrorMessage();
		  attachmentErrorElt.text(attachmentErrorNotification);
      attachString = mailFormAttachmentLabel.html();
      if (!attachString.includes('<font color="red">*</font>')){
        attachString += '<font color="red">*</font>';
      }
      mailFormAttachmentLabel.html(attachString);
		  return true;
	  }
	  /*if($(formDropdownClass + ' a.nesty-input').attr('aria-expanded') && (requestReasonTag == 'webform_case_wrong_product')){
		  errorMessageId = currentLanguage + '2';
		  attachmentErrorNotification = setErrorMessage();
		  attachmentErrorElt.text(attachmentErrorNotification);
      attachString = mailFormAttachmentLabel.html();
      if (!attachString.includes('<font color="red">*</font>')){
        attachString += '<font color="red">*</font>';
      }
      mailFormAttachmentLabel.html(attachString);
		  return true;
	  }*/
	  return false;
  }

  // Select checkbox
  function selectCheckbox(eltselector) {
	  $(eltselector).prop('checked', true);
  }

  // Clear checkbox
  function clearCheckbox(eltselector) {
	  $(eltselector).prop('checked', false);
  }
                                                                                              
  // If attachment checkbox field exists, select it,
  // and watch for changes to attachments and dropdown
  if ($(attachmentCheckboxId).length) {
	  selectCheckbox(attachmentCheckboxId);
	  startObserveMutations('#request-attachments-pool', formObserveMutationOptions, mutationObservedForm);
	  startObserveMutations(formDropdownClass, formObserveMutationOptions, mutationObservedForm);
  }

  // Adjust attachment error notification
  if (true) {
	  attachmentErrorNotification = setErrorMessage();
	  attachmentErrorElt.text(attachmentErrorNotification);
  }
  
  function setErrorMessage() {
  	return infoBoxWording["attachment-errors"][errorMessageId]
  }

  setFormAttachmentCheckbox();
  clearCheckbox(attachmentCheckboxId);

  setTimeout(function() { setFormAttachmentCheckbox() }, 500);




  function fillHoliday(lang){
      var portalChooser = 'ch';
      const d = new Date();
      datestring = String(d.getUTCFullYear()) + '-' + String(d.getUTCMonth() + 1) + '-' + String(d.getUTCDate()) + ' ' + String(d.getUTCHours()) + ':' + String(d.getUTCMinutes()) + ':' + String(d.getUTCSeconds())
      const utc_timestamp = Date.parse(datestring)
      var stampslist = showHolidays[portalChooser]
      stampslist.forEach((stampset) => {
          if (utc_timestamp > Date.parse(stampset[0]) && utc_timestamp < Date.parse(stampset[1])){
              var tempstring = textToDisplay[stampset[2]][lang]
              $('#holidaysDesktop')[0].innerHTML = tempstring
              $('#holidaysMobile')[0].innerHTML = tempstring
          }
      })
    }
</script>